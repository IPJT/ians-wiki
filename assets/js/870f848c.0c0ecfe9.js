"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[483],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(r),y=n,b=d["".concat(c,".").concat(y)]||d[y]||u[y]||i;return r?a.createElement(b,o(o({ref:t},p),{},{components:r})):a.createElement(b,o({ref:t},p))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9832:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const i={sidebar_position:1},o="Objects",s={unversionedId:"PersonalWiki/tutorial-basics/Javascript/object",id:"PersonalWiki/tutorial-basics/Javascript/object",title:"Objects",description:"Property identifier",source:"@site/docs/PersonalWiki/tutorial-basics/Javascript/object.md",sourceDirName:"PersonalWiki/tutorial-basics/Javascript",slug:"/PersonalWiki/tutorial-basics/Javascript/object",permalink:"/ians-wiki/docs/PersonalWiki/tutorial-basics/Javascript/object",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/PersonalWiki/tutorial-basics/Javascript/object.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"personalWiki",previous:{title:"Computer Science",permalink:"/ians-wiki/docs/PersonalWiki/tutorial-basics/computer-science"},next:{title:"Arrays",permalink:"/ians-wiki/docs/PersonalWiki/tutorial-basics/Javascript/arrays"}},c={},l=[{value:"Property identifier",id:"property-identifier",level:2},{value:"Computed property names",id:"computed-property-names",level:2},{value:"Shorthand property names",id:"shorthand-property-names",level:2}],p={toc:l};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"objects"},"Objects"),(0,n.kt)("h2",{id:"property-identifier"},"Property identifier"),(0,n.kt)("p",null,"In JavaScript, objects can be seen as a collection of properties. Proerties are identified using key values. A key value is either a String value or a Symbol value.\nThe code below shows how an object can be created using the object initializer syntax with different ways to declare property names."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'const a = "city";\nconst b = "Stockholm";\n\nconst exampleObject = {\n  firstName: "Ian", //key is valid JS identifier - will evaluate as sting\n  lastName: "Thorslund", //key is a string\n  ["age"]: 1, //key is a string\n  [a]: b, //a will evaluate as "city" at runtime (see "Computed property names"-section). Note that the value should not be enclosed in brackets to be computed and evaluated as "Sweden"\n  [Symbol.for("country")]: "Sweden", //key value is a Symbol value.\n};\n\nconsole.log(Object.getOwnPropertyNames(testObject)); // ["firstName", "lastName", "age", "city"] in which the typeof of each entry is"string"\nconsole.log(Object.getOwnPropertySymbols(testObject)); // [Symbol(country)] in which the typeof of the entry is "symbol"\n')),(0,n.kt)("p",null,"As seen above each property in the created object is identified using a key value that is either a String value or a Symbol value."),(0,n.kt)("h2",{id:"computed-property-names"},"Computed property names"),(0,n.kt)("p",null,"Allows you to put an expression in brackets [], that will be computed and used as the property name."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'var a = "b";\nvar c = { [a]: "d" }; //object initializer syntax\n')),(0,n.kt)("p",null,"is equivalent to:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'var a = "b";\nvar c = {};\nc[a] = "d"; //property accessor syntax\n')),(0,n.kt)("h2",{id:"shorthand-property-names"},"Shorthand property names"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'var s = "abc";\nvar n = 1;\nvar o = { s, n }; // This is equivalent to { s: s, n: n }\n')))}u.isMDXComponent=!0}}]);